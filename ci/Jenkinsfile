#!/usr/bin/env groovy

@Library('jenkinstools@master') _

import com.splunk.jenkins.DockerRequest;
import com.splunk.tool.plugin.docker.extension.BadDockerExitCode;

def imageName = "repo.splunk.com/splunk/gdi/docker-connect-splunk:build-${env.BUILD_NUMBER}"

def dockerReq = new DockerRequest(steps,
                                  currentBuild,
                                  env,
                                  [userId: "10777",
                                   imageName: "repo.splunk.com/splunk/gdi/docker-connect-splunk:latest",
                                   repoName: "git@github.com:splunk/docker-logging-plugin.git",
                                   runner: "yarn",
                                   remotePath: "/build"])


withSplunkWrapNode("master") {

    try {
        stage("Build splunk cloud stack") {
            println "=============build splunk cloud stack=============="
            withCredentials([file(credentialsId: 'gdi_connectors_orca', variable: 'ORCA_CREDENTIALS')]) {
                sh "tar -ovxf $ORCA_CREDENTIALS";
                splunkPrepareAndCheckOut request: dockerReq,
                                         files: "${WORKSPACE}/.orca, ${WORKSPACE}/.ssh";
            }
            splunkRunScript request:dockerReq,
                            script:
                                """
                                chmod +x ci/splunk_cloud_ci.sh && sh ci/splunk_cloud_ci.sh
                                """;
        }
        stage('Build image') {
            println "=============build image=============="
            withCredentials([file(credentialsId: 'gdi_connectors_orca', variable: 'ORCA_CREDENTIALS')]) {
                sh "tar -ovxf $ORCA_CREDENTIALS";
                splunkPrepareAndCheckOut request: dockerReq,
                                         files: "${WORKSPACE}/.orca, ${WORKSPACE}/.ssh";
            }
            splunkDockerImageBuild workDir: "/build/docker-logging-plugin/ci",
                                   imageName: imageName,
                                   dockerfilePath: "Dockerfile.docker-plugin"
        }
        stage('Run integration tests') {
            println "=============start docker plugin and run integration tests=============="
            splunkDockerStart imageName: imageName,
                              mountBindings: '/var/run/docker.sock:/var/run/docker.sock:ro',
                              script:
                              """
                              chmod +x ci/docker_integration_tests.sh && sh ci/docker_integration_tests.sh
                              """;
        }
    }
    catch (BadDockerExitCode e) {
        currentBuild.result = "FAILURE";
        echo "Exception Caught: ${e.getMessage()}";
        echo "Stack Trace: ${e.printStackTrace()}";
    }
    catch (Exception e) {
        currentBuild.result = "FAILURE";
        echo "Exception Caught: ${e.getMessage()}";
        echo "Stack Trace: ${e.printStackTrace()}";
    }
    finally {
        println "=============delete splunk cloud stack=============="
        splunkCopyFromDocker files: "stack_id",
                             imageName: imageName,
                             remotePath: "/workspace";
                             archiveArtifacts allowEmptyArchive: true, artifacts: "target/stack_id";
        withCredentials([file(credentialsId: 'gdi_connectors_orca', variable: 'ORCA_CREDENTIALS')]) {
            sh '''#!/bin/bash
                    tar -ovxf $ORCA_CREDENTIALS
                    mkdir -p ~/.orca
                    cp -r .orca/* ~/.orca
                    chmod 600 ~/.orca/*id_rsa
                    chown -R 10777 ~/.orca
                    pip install splunk_orca==1.1.0 -i https://repo.splunk.com/artifactory/api/pypi/pypi/simple --upgrade
                    stack_id=`cat target/stack_id`
                    python -m splunk_orca --cloud cloudworks destroy $stack_id
                '''
        }
        steps.cleanWs();
    }
}
